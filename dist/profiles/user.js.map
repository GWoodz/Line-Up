{"version":3,"sources":["../../profiles/user.js"],"names":["active","verifyInfo","obj","firstName","lastName","birthdate","email","phoneNumber","city","state","country","gender","canActivate","info","activate","verified","status","canGenerateId","generateId","x","someId","id","console","log","Object","defineProperty","value","checkPaymentInfo","hasPaymentMethod","paymentInfo","User","dateCreated","assign","canUpdate","error","type","Date","enumerable","writable","update","key","hasOwnProperty","configurable"],"mappings":"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","file":"user.js","sourcesContent":["\"use strict\";\n//declaration entity file for user model\nimport profiles from \"./profileTypes\";\n\nconst active = true;\n\n//validates info before user can be created\nconst verifyInfo = function(obj) {\n\n    if(typeof obj.firstName !== \"String\"){\n        //throw not correct type error\n        return false;\n    }else if(typeof obj.lastName !== \"String\" ){\n        //throw not correct type error\n        return false;\n    }else if(typeof obj.birthdate !== \"String\"){\n        //throw incorrect birthDate error\n        return false;\n    }else if(typeof obj.email !== \"String\"){\n        //throw incorrect email error\n        return false;\n    }else if(typeof obj.phoneNumber !== \"String\"){\n        //throw incorrect phone format error\n        return false;\n    }else if((typeof obj.city && typeof obj.state) !== \"String\"){\n        //throw invalid location format error\n        return false;\n    }else if(typeof obj.country !== \"String\"){\n        //throw invalid country format error\n        return false;\n    }else if(typeof obj.gender !== \"String\"){\n        //incorrect format\n        return false;\n    }\n    else{\n        return true;\n    }\n};\n\n//generates id for database storage\nconst canActivate = (info) => ({\n\n    activate(verified){\n        if(verified){\n          info.status = active;\n        }\n        else{\n          //Error: User is not a verified user\n        }\n    }\n});\n\nconst canGenerateId = () => ({\n\n    generateId(x) {\n\n        let someId = x;\n\n        //checks to see if there is an existing id\n        if (this.id) {\n            console.log(\"There is already an existing id\");\n            return\n        }\n        console.log(\"attempting to add id...\");\n        //adds new id property to user object\n        Object.defineProperty(this, \"id\", {\n            value: someId\n        });\n    },\n});\n\n//gives user ability to check if payment is setup\nconst checkPaymentInfo = (state) => ({\n\n    hasPaymentMethod: () => {\n      //check if paymentInfo is empty\n      if(state.paymentInfo != null){\n        return true\n      }\n      else{\n        return false\n      }\n    }\n});\n\n//Public variables and objects\n\nfunction User (info, verified) {\n\n  if(verified){\n    //checks to see if this is an existing user\n    if(info.dateCreated){\n      if(info.status == active){\n          return Object.assign(info, canUpdate(info), checkPaymentInfo(info));\n      }\n      else{\n        //give option to activate profile\n        return Object.assign(info, canActivate(info));\n      }\n    }\n    else {\n      if(verifyInfo(obj)){\n          console.log(error);\n      }\n      else{\n            //creates a new user profile\n            let state = {\n\n                type: profiles[0],\n                status: active,\n                firstName: info.firstName,\n                lastName: info.lastName,\n                birthdate: info.birthdate,\n                email: info.email,\n                phoneNumber: info.phoneNumber,\n                city: info.city,\n                state: info.state,\n                country: info.country,\n                gender: info.gender,\n                paymentInfo: null,\n                dateCreated: new Date()\n\n            }\n\n\n            Object.defineProperty(state, \"hasBarberProfile\", {\n                value: false,\n                enumerable: true,\n                writable: true\n            });\n\n            return Object.assign(state, canUpdate(), canGenerateId(), checkPaymentInfo());\n        }\n    }\n  }\n  else{\n    //Error: User has not been verified\n  }\n}\n\n//gives user ability to update personal info\nconst canUpdate = () => ({\n\n    //enter key value object of info to update\n    update: function(key, value){\n\n      if(this.hasOwnProperty(key)){\n        Object.defineProperty(this, key, {\n          value: value,\n          writable: true,\n          configurable: true,\n          enumerable: true\n        });\n      }\n      else{\n        console.log(\"Could not find a matching key value pair\");\n        //Error: this property does not exist\n      }\n\n    }\n});\n\nexport default {User, canUpdate};\n"]}