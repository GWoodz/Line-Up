{"version":3,"sources":["../../../profiles/Services/Passport.js"],"names":["passport","require","LocalStrategy","Strategy","models","serializeUser","user","done","id","deserializeUser","User","findById","then","err","use","usernameField","passwordField","passReqToCallback","req","username","password","type","findOne","where","email","message","validPassword","catch","userId","Barber","body","UserModel","findOrCreate","defaults","firstName","lastName","status","phoneNumber","gender","paymentInfo","passwordHash","spread","created","console","log","UserId","BarberModel","isPremium","premium","module","exports"],"mappings":"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","file":"Passport.js","sourcesContent":["/*\n* PassPort service for registering both barbers and clients\n*\n* Provides different strategies for signing in and signing up users.\n*\n* Sequelize models are used to declare different search queries for authentication\n*\n* Models Used:\n*   - Barber User\n*   - Client User\n*\n* Strategies used:\n* Local SignIn\n*   - Used to verify users when signing in API with username/email and password\n*   - Email is used instead of username to search for User in database if client is signing in\n*   - Username is used to lookup user if barber is signing in\n*\n* Local SignUp\n*   - Used to verify users when attempting to create a new account with username or email/password\n*/\n\n\nconst passport = require('passport');\nconst LocalStrategy = require('passport-local').Strategy;\nconst models = require('../DBModels/index');\n\npassport.serializeUser((user, done) => {\n    done(null, user.id);\n});\n\npassport.deserializeUser((id, done) => {\n    models.User.findById(id)\n        .then((user,err) => {\n            done(err, user);\n        });\n});\n\n//Local signin strategy used for verfying and logging in existing users\npassport.use('local-signin', new LocalStrategy({\n        usernameField: 'email',\n        passwordField: 'password',\n        passReqToCallback: true\n    }, (req, username, password, done) => {\n        let type = req.type || 'client';\n        if (type === 'client') { //if type is client , proceeds to looking for a client User\n\n            //looks for user with matching email\n            models.User.findOne({where: {email: username}})\n                .then((user, err) => {\n                    //respond with error if any are found\n                    if (err) {return done(err);}\n                    //if no user is found prompt user that email is incorrect\n                    if (!user) {\n                        return done(null, false, {message: 'Incorrect email'})\n                    }\n                    //if password validation fails prompt user that password is incorrect\n                    if (!user.validPassword(password)) {\n                        return done(null, false, {message: 'Incorrect password'})\n                    }\n                    //if nothing fails, complete request and respond with user object\n                    return done(null, user)\n                })\n                .catch(err);\n            } else if (type === 'barber' && req.userId) { //if type is barber and userid has been passed proceeds to looking for barber\n                //looks for barber with matching username\n                models.Barber.findOne({\n                    where: {username: req.username}\n                }).then((user, err) => {\n                    //respond with error if any are found\n                    if (err) return done(err);\n                    //if no barber matches prompt user that username is incorrect\n                    if (!user) {\n                        return done(null, false, {message: 'Incorrect username'})\n                    }\n                    //if nothing fails, complete request and respond with barber object\n                    return done(null, user)\n                });\n            }\n            else{\n                //if all else fails prompt user for invalid credentials\n                return done(null, false, {message: 'Invalid credentials'})\n        }})\n    );\n\n//Local Sign Up strategy used for verifying and creating new users\npassport.use('local-signup', new LocalStrategy({\n        usernameField: 'email',\n        passwordField: 'password',\n        passReqToCallback: true\n    }, (req, username, password, done) => {\n\n        if(req.body.type === 'client') {\n            let UserModel = models.User;\n            UserModel\n                .findOrCreate({ //look for existing user or create new\n                    where: { email: username},\n                    defaults: {\n                        id: req.body.id, //This id is generated somewhere else (only provided by req in dev)\n                        firstName: req.body.firstName,\n                        lastName: req.body.lastName,\n                        status: req.body.status,\n                        phoneNumber: req.body.phoneNumber,\n                        gender: req.body.gender,\n                        paymentInfo: req.body.paymentInfo || null,\n                        passwordHash: req.body.password\n                    }\n                })\n                .spread((user, created) => {\n                    if(created) {  //if user is created return user in callback\n                        console.log('new user created');\n                        return done(null, user);\n                    }\n                    else{   //if user is not created respond with error message\n                        console.log('User has already been created');\n                        return done(null, created, {message: 'User already exists'})\n                    }\n\n                })\n        }\n        else if(req.body.UserId) {\n                let BarberModel = models.Barber;\n                BarberModel\n                    .findOrCreate({\n                        where: { username: req.body.username},\n                        defaults: {\n                            UserId: req.body.UserId,\n                            isPremium: req.body.premium || false\n                        }\n                    })\n                    .spread((user, created) => {\n                        if (created) {\n                            console.log('barber Created');\n                            return done(null, user)\n                        }\n                        else {\n                            console.log(\"Barber already exists and could not be created\");\n                            return done(null, false, {message: 'Barber Profile already exists'})\n                        }\n                    })\n    }\n})\n);\n\nmodule.exports = passport;"]}