{"version":3,"sources":["../../../profiles/DBModels/User.js"],"names":["Sequelize","require","bcrypt","saltRounds","module","exports","sequelize","id","type","INTEGER","primaryKey","autoIncrement","firstName","STRING","allowNull","lastName","status","defaultValue","birthdate","email","phoneNumber","passwordHash","gender","TINYINT","paymentInfo","hooks","beforeCreate","user","options","console","log","password","generateHash","testPass","compare","err","res","pass","genSalt","salt","hash","models","Model"],"mappings":"AAAA;;;;;;;;;;;;AACA,IAAMA,YAAYC,QAAQ,WAAR,CAAlB;AACA,IAAMC,SAASD,QAAQ,QAAR,CAAf;AACA,IAAME,aAAa,CAAnB;;AAEAC,OAAOC,OAAP;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,6BAEoBC,SAFpB,EAE+B;AAAA;;AACnB,gGAAkB;AACVC,oBAAI;AACAC,0BAAMR,UAAUS,OADhB;AAEAC,gCAAY,IAFZ;AAGAC,mCAAe;AAHf,iBADM;AAMVC,2BAAW;AACPJ,0BAAMR,UAAUa,MADT;AAEPC,+BAAW;AAFJ,iBAND;AAUVC,0BAAU;AACNP,0BAAMR,UAAUa,MADV;AAENC,+BAAW;AAFL,iBAVA;AAcVE,wBAAQ;AACJR,0BAAMR,UAAUa,MADZ;AAEJI,kCAAc;AAFV,iBAdE;AAkBVC,2BAAW;AACPV,0BAAMR,UAAUa,MADT;AAEPC,+BAAW;AAFJ,iBAlBD;AAsBVK,uBAAO;AACHX,0BAAMR,UAAUa,MADb;AAEHC,+BAAW;AAFR,iBAtBG;AA0BVM,6BAAa;AACTZ,0BAAMR,UAAUa;AADP,iBA1BH;AA6BVQ,8BAAc;AACVb,0BAAMR,UAAUa,MADN;AAEVC,+BAAW;AAFD,iBA7BJ;AAiCVQ,wBAAQ;AACJd,0BAAMR,UAAUuB;AADZ,iBAjCE;AAoCVC,6BAAa;AACThB,0BAAMR,UAAUa,MADP;AAETC,+BAAW,IAFF;AAGTG,kCAAc;AAHL;AApCH,aAAlB,EA0CI,EAACX,oBAAD,EA1CJ,EA2CI;AACImB,uBAAO;AACHC,kCAAc,sBAACC,IAAD,EAAOC,OAAP,EAAmB;AAC7BC,gCAAQC,GAAR;AACAH,6BAAKI,QAAL,GAAgB,OAAKC,YAAL,CAAkBL,KAAKI,QAAvB,EAAiC5B,UAAjC,CAAhB;AACH;AAJE;AADX,aA3CJ;AAoDE;AAvDd;AAAA;AAAA,sCAyD6B8B,QAzD7B,EAyDuC;AAC3B/B,mBAAOgC,OAAP,CAAeD,QAAf,EAAyB,KAAKZ,YAA9B,EAA4C,UAACc,GAAD,EAAMC,GAAN,EAAc;AACvD,oBAAGD,GAAH,EAAQ;AAAC,2BAAOA,GAAP;AAAY;AACrB,uBAAOC,GAAP;AACF,aAHD;AAIH;AA9DT;AAAA;AAAA,qCAgE4BC,IAhE5B,EAgEkClC,UAhElC,EAgE8C;AAClCD,mBAAOoC,OAAP,CAAenC,UAAf,EAA2B,UAACgC,GAAD,EAAMI,IAAN,EAAe;AAAE;AACxCrC,uBAAOsC,IAAP,CAAYH,IAAZ,EAAkBE,IAAlB,EAAwB,UAACJ,GAAD,EAAMK,IAAN,EAAe;AAAE;AACrC,2BAAOA,IAAP,CADmC,CACtB;AAChB,iBAFD;AAGH,aAJD;AAKF;AAtEV;AAAA;AAAA,kCAyEyBC,MAzEzB,EAyEiC,CACxB;AA1ET;;AAAA;AAAA,EACuBzC,UAAU0C,KADjC","file":"User.js","sourcesContent":["'use strict';\nconst Sequelize = require('sequelize');\nconst bcrypt = require('bcrypt');\nconst saltRounds = 4;\n\nmodule.exports =\n    class User extends Sequelize.Model {\n        static init(sequelize) {\n            return super.init({\n                    id: {\n                        type: Sequelize.INTEGER,\n                        primaryKey: true,\n                        autoIncrement: true\n                    },\n                    firstName: {\n                        type: Sequelize.STRING,\n                        allowNull: false\n                    },\n                    lastName: {\n                        type: Sequelize.STRING,\n                        allowNull: false\n                    },\n                    status: {\n                        type: Sequelize.STRING,\n                        defaultValue: 'active'\n                    },\n                    birthdate: {\n                        type: Sequelize.STRING,\n                        allowNull: true\n                    },\n                    email: {\n                        type: Sequelize.STRING,\n                        allowNull: false\n                    },\n                    phoneNumber: {\n                        type: Sequelize.STRING\n                    },\n                    passwordHash: {\n                        type: Sequelize.STRING,\n                        allowNull: false\n                    },\n                    gender: {\n                        type: Sequelize.TINYINT\n                    },\n                    paymentInfo: {\n                        type: Sequelize.STRING,\n                        allowNull: true,\n                        defaultValue: null\n                    }\n                },\n                {sequelize},\n                {\n                    hooks: {\n                        beforeCreate: (user, options) => {\n                            console.log();\n                            user.password = this.generateHash(user.password, saltRounds);\n                        }\n                    }\n                },\n\n            )};\n\n        static validPassword(testPass) {\n            bcrypt.compare(testPass, this.passwordHash, (err, res) => {\n               if(err) {return err;}\n               return res;\n            });\n        }\n\n        static generateHash(pass, saltRounds) {\n            bcrypt.genSalt(saltRounds, (err, salt) => { //generate salt using saltRounds provided\n                bcrypt.hash(pass, salt, (err, hash) => { //generate hash using password and salt generated\n                    return hash; //returns hashed password\n                });\n            }\n        )}\n\n\n        static associate(models) {\n        }\n    };"]}