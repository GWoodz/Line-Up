{"version":3,"sources":["../../../profiles/DBModels/index.js"],"names":["fs","require","path","Sequelize","env","process","NODE_ENV","config","db","database","db_name","username","password","host","dialect","port","operatorsAliases","sync","force","match","then","console","log","catch","err","module","exports","models","Object","assign","readdirSync","__dirname","filter","file","indexOf","map","model","join","name","init","keys","associate","bcrypt","saltRounds","User","beforeCreate","user","options","Promise","resolve","reject","genSalt","salt","hash","passwordHash","prototype","validatePassword","testPass","compare","res"],"mappings":";;;;;;AAAA,IAAMA,KAAKC,QAAQ,IAAR,CAAX,C,CAA0B;AAC1B,IAAMC,OAAOD,QAAQ,MAAR,CAAb;AACA,IAAME,YAAYF,QAAQ,WAAR,CAAlB;AACA,IAAMG,MAAMC,QAAQD,GAAR,CAAYE,QAAZ,IAAwB,aAApC;AACA,IAAMC,SAASN,QAAQ,cAAR,EAAwBG,GAAxB,CAAf;;AAEA;AACA,IAAMI,KAAK,IAAIL,SAAJ,CAAcI,OAAOE,QAAP,CAAgBC,OAA9B,EAAuCH,OAAOE,QAAP,CAAgBE,QAAvD,EAAiEJ,OAAOE,QAAP,CAAgBG,QAAjF,EAA2F;AAClGC,UAAMN,OAAOE,QAAP,CAAgBI,IAD4E;AAElGC,aAASP,OAAOE,QAAP,CAAgBK,OAFyE;AAGlGC,UAAMR,OAAOE,QAAP,CAAgBM,IAH4E;AAIlG;AACAC,sBAAkB;AALgF,CAA3F,CAAX;;AAQA;AACAR,GAAGS,IAAH,CAAQ,EAACC,OAAO,IAAR,EAAcC,OAAO,QAArB,EAAR,EACKC,IADL,CACU,YAAM;AACRC,YAAQC,GAAR,CAAY,mCAAZ;AACH,CAHL,EAIKC,KAJL,CAIW,UAACC,GAAD,EAAS;AACZH,YAAQC,GAAR,CAAYE,GAAZ;AACH,CANL;;AAQAC,OAAOC,OAAP,GAAiBlB,EAAjB;;AAEA;AACA,IAAMmB,SAASC,OAAOC,MAAP,gBAAc,EAAd,4BAAqB7B,GAAG8B,WAAH,CAAeC,SAAf,EAC/BC,MAD+B,CACxB,UAACC,IAAD;AAAA,WACHA,KAAKC,OAAL,CAAa,GAAb,MAAsB,CAAvB,IAA8BD,SAAS,UADnC;AAAA,CADwB,EAI/BE,GAJ+B,CAI3B,UAAUF,IAAV,EAAgB;AACjB,QAAMG,QAAQnC,QAAQC,KAAKmC,IAAL,CAAUN,SAAV,EAAqBE,IAArB,CAAR,CAAd;AACA;AACA,+BACKG,MAAME,IADX,EACkBF,MAAMG,IAAN,CAAW/B,EAAX,CADlB;AAGH,CAV+B,CAArB,GAAf;;AAaA;;;;;;AACA,yBAAoBoB,OAAOY,IAAP,CAAYb,MAAZ,CAApB,8HAAyC;AAAA,YAA9BS,KAA8B;;AACrC,eAAOT,OAAOS,KAAP,EAAcK,SAArB,KAAmC,UAAnC,IAAiDd,OAAOS,KAAP,EAAcK,SAAd,CAAwBd,MAAxB,CAAjD;AACH;;;;;;;;;;;;;;;;AAED,IAAMe,SAASzC,QAAQ,QAAR,CAAf;AACA,IAAM0C,aAAa,CAAnB;;AAEA;;AAEA;AACAhB,OAAOiB,IAAP,CAAYC,YAAZ,CAA0B,UAACC,IAAD,EAAOC,OAAP,EAAmB;AACzC1B,YAAQC,GAAR,CAAY,sBAAZ;AACA,WAAO,IAAI0B,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCR,eAAOS,OAAP,CAAeR,UAAf,EAA2B,UAACnB,GAAD,EAAM4B,IAAN,EAAe;AAAE;AACxC,gBAAG5B,GAAH,EAAQ,OAAO0B,OAAO1B,GAAP,CAAP;AACRkB,mBAAOW,IAAP,CAAYP,KAAKQ,YAAjB,EAA+BF,IAA/B,EAAqC,UAAC5B,GAAD,EAAM6B,IAAN,EAAe;AAAE;AAClDhC,wBAAQC,GAAR,CAAY,4BAAZ;AACAwB,qBAAKQ,YAAL,GAAoBD,IAApB,CAFgD,CAEtB;AAC1B,uBAAOJ,QAAQH,IAAR,EAAcC,OAAd,CAAP;AACH,aAJD;AAKH,SAPD;AAQH,KATM,CAAP;AAUH,CAZD;;AAcA;AACApB,OAAOiB,IAAP,CAAYW,SAAZ,CAAsBC,gBAAtB,GAA0C,UAACV,IAAD,EAAOW,QAAP,EAAoB;;AAE1DpC,YAAQC,GAAR,CAAY,wBAAwB,KAAxB,GAAgCwB,KAAKQ,YAArC,GAAoD,OAApD,GAA8DG,QAA1E;AACAf,WAAOgB,OAAP,CAAeD,QAAf,EAAyBX,KAAKQ,YAA9B,EAA4C,UAAC9B,GAAD,EAAMmC,GAAN,EAAc;AACtD,YAAInC,GAAJ,EAAS,OAAQA,GAAR,CAAT,KACI;AACA,gBAAGmC,GAAH,EAAQ;AACJtC,wBAAQC,GAAR,CAAY,uBAAZ;AACA,uBAAOqC,GAAP;AACH,aAHD,MAIK;AACDtC,wBAAQC,GAAR,CAAY,uBAAZ;AACA,uBAAOqC,GAAP;AACH;AAEJ;AACJ,KAbD;AAcH,CAjBD;;AAmBAlC,OAAOC,OAAP,GAAiBC,MAAjB","file":"index.js","sourcesContent":["const fs = require(\"fs\"); // file system for grabbing files\nconst path = require(\"path\");\nconst Sequelize = require('sequelize');\nconst env = process.env.NODE_ENV || 'development';\nconst config = require('../../config')[env];\n\n//Initializes db and uses config variables to populate verification fields\nconst db = new Sequelize(config.database.db_name, config.database.username, config.database.password, {\n    host: config.database.host,\n    dialect: config.database.dialect,\n    port: config.database.port,\n    //limits Operator Alias use for security reasons\n    operatorsAliases: false\n});\n\n//Connects db, forces all models to sync to test databases\ndb.sync({force: true, match: /_test$/})\n    .then(() => {\n        console.log(\"Database is successfuly connected\");\n    })\n    .catch((err) => {\n        console.log(err);\n    })\n\nmodule.exports = db;\n\n// Load each model file\nconst models = Object.assign({}, ...fs.readdirSync(__dirname)\n    .filter((file) =>\n        (file.indexOf(\".\") !== 0) && (file !== 'index.js')\n    )\n    .map(function (file) {\n        const model = require(path.join(__dirname, file));\n        // console.log(model.init(sequelize).tableName)\n        return {\n            [model.name]: model.init(db),\n        };\n    })\n);\n\n// Load model associations\nfor (const model of Object.keys(models)) {\n    typeof models[model].associate === 'function' && models[model].associate(models);\n}\n\nconst bcrypt = require('bcrypt');\nconst saltRounds = 4;\n\n//User Hooks\n\n//using the user model encrypt and salt password before create\nmodels.User.beforeCreate ((user, options) => {\n    console.log(\"Storing the password\");\n    return new Promise((resolve, reject) => {\n        bcrypt.genSalt(saltRounds, (err, salt) => { //generate salt using saltRounds provided\n            if(err) return reject(err);\n            bcrypt.hash(user.passwordHash, salt, (err, hash) => { //generate hash using password and salt generated\n                console.log(\"Getting password encrypted\");\n                user.passwordHash = hash; //sets user password to hash\n                return resolve(user, options);\n            });\n        });\n    });\n});\n\n//instance Methods\nmodels.User.prototype.validatePassword = ((user, testPass) => {\n\n    console.log(\"Validating password\" + \" : \" + user.passwordHash + \" and \" + testPass);\n    bcrypt.compare(testPass, user.passwordHash, (err, res) => {\n        if (err) return (err);\n        else{\n            if(res) {\n                console.log(\"validate successfully\");\n                return res;\n            }\n            else {\n                console.log(\"validate unsuccessful\");\n                return res;\n            }\n\n        }\n    });\n});\n\nmodule.exports = models;\n\n"]}